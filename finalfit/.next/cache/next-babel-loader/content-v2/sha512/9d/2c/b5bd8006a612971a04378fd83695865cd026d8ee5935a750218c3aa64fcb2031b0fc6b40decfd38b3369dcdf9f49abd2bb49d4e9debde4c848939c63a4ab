{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/components/CheckOut.js\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { gql, useMutation } from '@apollo/client';\nimport { useRouter } from 'next/router';\nimport NProgress from 'nprogress';\nimport styled from 'styled-components';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport ErrorMessage from './ErrorMessage';\nimport { CURRENT_USER_QUERY, useUser } from './User';\nimport SickButton from './styles/SickButton';\nimport { useState } from 'react';\nimport nProgress from 'nprogress';\nconst CheckOutFormStyles = styled.form.withConfig({\n  displayName: \"CheckOut__CheckOutFormStyles\",\n  componentId: \"sc-1h9ciz7-0\"\n})([\"box-shadow:0 1px 2px 2px rgba(0,0,0,0.04);border:1px solid rgba(0,0,0,0.04);border-radius:5px;padding:1rem;display:grid;grid-gap:1rem;\"]);\nconst CREATE_ORDER_MUTATION = gql`\n    mutation CREATE_ORDER_MUTATION($token: String!) {\n        createOrder(token: $token) {\n            id\n            items\n            charge\n            total\n        }\n    }\n`;\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nconst CheckOutForm = () => {\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const [placeOrder] = useMutation(CREATE_ORDER_MUTATION);\n  const stripe = useStripe();\n  const elements = useElements(); // const me = useUser();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    nProgress.start();\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod);\n\n    if (error) {\n      setError(error);\n    } //\n\n\n    placeOrder({\n      variables: {\n        token: paymentMethod.id\n      },\n      refetchQueries: [{\n        query: CURRENT_USER_QUERY\n      }]\n    }).catch(err => alert(err.message));\n    setLoading(false);\n    nProgress.done();\n  };\n\n  return /*#__PURE__*/_jsxDEV(CheckOutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 12\n      },\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SickButton, {\n      children: \"Checkout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\nconst CheckOut = () => /*#__PURE__*/_jsxDEV(Elements, {\n  stripe: stripeLib,\n  children: /*#__PURE__*/_jsxDEV(CheckOutForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 82,\n  columnNumber: 5\n}, this);\n\nexport default CheckOut;","map":{"version":3,"sources":["/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/components/CheckOut.js"],"names":["loadStripe","CardElement","Elements","useElements","useStripe","gql","useMutation","useRouter","NProgress","styled","calcTotalPrice","ErrorMessage","CURRENT_USER_QUERY","useUser","SickButton","useState","nProgress","CheckOutFormStyles","form","CREATE_ORDER_MUTATION","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckOutForm","error","setError","loading","setLoading","placeOrder","stripe","elements","handleSubmit","e","preventDefault","start","paymentMethod","createPaymentMethod","type","card","getElement","console","log","variables","token","id","refetchQueries","query","catch","err","alert","message","done","fontSize","CheckOut"],"mappings":"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","sourcesContent":["import { loadStripe } from '@stripe/stripe-js';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { gql, useMutation } from '@apollo/client';\nimport { useRouter } from 'next/router';\nimport NProgress from 'nprogress';\nimport styled from 'styled-components';\nimport calcTotalPrice from '../lib/calcTotalPrice';\nimport ErrorMessage from './ErrorMessage';\nimport { CURRENT_USER_QUERY, useUser } from './User';\nimport SickButton from './styles/SickButton';\nimport { useState } from 'react';\nimport nProgress from 'nprogress';\n\nconst CheckOutFormStyles = styled.form`\n    box-shadow: 0 1px 2px 2px rgba(0, 0, 0, 0.04);\n    border: 1px solid rgba(0, 0, 0, 0.04);\n    border-radius: 5px;\n    padding: 1rem;\n    display: grid;\n    grid-gap: 1rem;\n`;\n\nconst CREATE_ORDER_MUTATION = gql`\n    mutation CREATE_ORDER_MUTATION($token: String!) {\n        createOrder(token: $token) {\n            id\n            items\n            charge\n            total\n        }\n    }\n`;\n\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nconst CheckOutForm = () => {\n    const [error, setError] = useState();\n    const [loading, setLoading] = useState(false);\n    const [placeOrder] = useMutation(CREATE_ORDER_MUTATION)\n    const stripe = useStripe();\n    const elements = useElements();\n\n    // const me = useUser();\n\n    const handleSubmit = async e => {\n        e.preventDefault();\n        setLoading(true);\n        nProgress.start();\n\n        const { error, paymentMethod } = await stripe.createPaymentMethod({\n            type: 'card',\n            card: elements.getElement(CardElement)\n        });\n        console.log(paymentMethod);\n\n        if(error) {\n            setError(error);\n        }\n        //\n        placeOrder({\n            variables: {\n                token: paymentMethod.id\n            },\n            refetchQueries: [{\n                query: CURRENT_USER_QUERY\n            }]\n        }).catch(err => alert(err.message));\n        setLoading(false);\n        nProgress.done();\n    }\n\n    return (\n        <CheckOutFormStyles onSubmit={handleSubmit}>\n            {error && <p style={{fontSize: 12}}>{error.message}</p>}\n            <CardElement />\n            <SickButton>Checkout</SickButton>\n        </CheckOutFormStyles>\n    );\n};\n\nconst CheckOut = () => (\n    <Elements stripe={stripeLib}>\n        <CheckOutForm />\n    </Elements>\n)\n\n\nexport default CheckOut;"]},"metadata":{},"sourceType":"module"}