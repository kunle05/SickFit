{"ast":null,"code":"import _regeneratorRuntime from \"/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\n\nvar useForm = function useForm() {\n  _s();\n\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _useState = useState(initial),\n      inputs = _useState[0],\n      setInputs = _useState[1];\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _e$target, name, value, type, files, data, res, file;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _e$target = e.target, name = _e$target.name, value = _e$target.value, type = _e$target.type;\n\n              if (type === 'number') {\n                value = parseFloat(value);\n              }\n\n              if (!(type === 'file')) {\n                _context.next = 15;\n                break;\n              }\n\n              files = e.target.files;\n              data = new FormData();\n              data.append('file', files[0]);\n              data.append('upload_preset', 'sickfits');\n              _context.next = 9;\n              return fetch('https://api.cloudinary.com/v1_1/kunlekodes/image/upload', {\n                method: 'POST',\n                body: data\n              });\n\n            case 9:\n              res = _context.sent;\n              _context.next = 12;\n              return res.json();\n\n            case 12:\n              file = _context.sent;\n              value = file.secure_url;\n              inputs.largeImage = file.eager[0].secure_url;\n\n            case 15:\n              setInputs(_objectSpread(_objectSpread({}, inputs), {}, _defineProperty({}, name, value)));\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleChange(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var resetForm = function resetForm() {\n    setInputs(initial);\n  };\n\n  var clearForm = function clearForm() {\n    for (var item in inputs) {\n      inputs[item] = \"\";\n    }\n  };\n\n  return {\n    inputs: inputs,\n    handleChange: handleChange,\n    resetForm: resetForm,\n    clearForm: clearForm\n  };\n};\n\n_s(useForm, \"0tjT+aoDVbAe0wsQZsq9AKLCE20=\");\n\nexport default useForm;","map":{"version":3,"sources":["/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","target","name","value","type","parseFloat","files","data","FormData","append","fetch","method","body","res","json","file","secure_url","largeImage","eager","resetForm","clearForm","item"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkB;AAAA;;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAAA,kBACFF,QAAQ,CAACE,OAAD,CADN;AAAA,MACvBC,MADuB;AAAA,MACfC,SADe;;AAG9B,MAAMC,YAAY;AAAA,wEAAG,iBAAMC,CAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACSA,CAAC,CAACC,MADX,EACZC,IADY,aACZA,IADY,EACNC,KADM,aACNA,KADM,EACCC,IADD,aACCA,IADD;;AAEjB,kBAAIA,IAAI,KAAK,QAAb,EAAuB;AACnBD,gBAAAA,KAAK,GAAGE,UAAU,CAACF,KAAD,CAAlB;AACH;;AAJgB,oBAKdC,IAAI,KAAK,MALK;AAAA;AAAA;AAAA;;AAMPE,cAAAA,KANO,GAMCN,CAAC,CAACC,MAAF,CAASK,KANV;AAOPC,cAAAA,IAPO,GAOA,IAAIC,QAAJ,EAPA;AAQbD,cAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBH,KAAK,CAAC,CAAD,CAAzB;AACAC,cAAAA,IAAI,CAACE,MAAL,CAAY,eAAZ,EAA6B,UAA7B;AATa;AAAA,qBAWKC,KAAK,CAAC,yDAAD,EAA4D;AAACC,gBAAAA,MAAM,EAAE,MAAT;AAAiBC,gBAAAA,IAAI,EAAEL;AAAvB,eAA5D,CAXV;;AAAA;AAWPM,cAAAA,GAXO;AAAA;AAAA,qBAYMA,GAAG,CAACC,IAAJ,EAZN;;AAAA;AAYPC,cAAAA,IAZO;AAabZ,cAAAA,KAAK,GAAGY,IAAI,CAACC,UAAb;AACAnB,cAAAA,MAAM,CAACoB,UAAP,GAAoBF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcF,UAAlC;;AAda;AAiBjBlB,cAAAA,SAAS,iCACFD,MADE,2BAEJK,IAFI,EAEIC,KAFJ,GAAT;;AAjBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZJ,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAuBA,MAAMoB,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpBrB,IAAAA,SAAS,CAACF,OAAD,CAAT;AACH,GAFD;;AAIA,MAAMwB,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,SAAI,IAAIC,IAAR,IAAgBxB,MAAhB,EAAwB;AACpBA,MAAAA,MAAM,CAACwB,IAAD,CAAN,GAAe,EAAf;AACH;AACJ,GAJD;;AAMA,SAAO;AAACxB,IAAAA,MAAM,EAANA,MAAD;AAASE,IAAAA,YAAY,EAAZA,YAAT;AAAuBoB,IAAAA,SAAS,EAATA,SAAvB;AAAkCC,IAAAA,SAAS,EAATA;AAAlC,GAAP;AACH,CArCD;;GAAMzB,O;;AAuCN,eAAeA,OAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useForm = (initial = {}) => {\n    const [inputs, setInputs] = useState(initial);\n\n    const handleChange = async e => {\n        let {name, value, type} = e.target;\n        if (type === 'number') {\n            value = parseFloat(value);\n        }\n        if(type === 'file') {\n            const files = e.target.files;\n            const data = new FormData();\n            data.append('file', files[0]);\n            data.append('upload_preset', 'sickfits'); \n\n            const res = await fetch('https://api.cloudinary.com/v1_1/kunlekodes/image/upload', {method: 'POST', body: data});\n            const file = await res.json();\n            value = file.secure_url;\n            inputs.largeImage = file.eager[0].secure_url;\n        }\n\n        setInputs({\n            ...inputs,\n            [name] : value\n        });\n    };\n\n    const resetForm = () => {\n        setInputs(initial);\n    }\n\n    const clearForm = () => {\n        for(var item in inputs) {\n            inputs[item] = \"\";\n        }\n    }\n\n    return {inputs, handleChange, resetForm, clearForm};\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}