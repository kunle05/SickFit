{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n            query {\\n                cartOpen \\n            }\\n        \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { withApollo } from 'next-with-apollo';\nimport { ApolloClient, gql, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { endPoint } from '../config';\nimport paginationField from './paginationField';\nimport { mergeDeep } from '@apollo/client/utilities';\n\nfunction createClient(_ref) {\n  var headers = _ref.headers,\n      initialState = _ref.initialState;\n  var cache = new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          getAllItems: paginationField()\n        }\n      },\n      User: {\n        fields: {\n          cart: {\n            merge: function merge(existing, incoming) {\n              console.log(existing);\n              return incoming;\n            }\n          }\n        }\n      }\n    }\n  }).restore(initialState || {});\n  cache.writeQuery({\n    query: gql(_templateObject()),\n    data: {\n      cartOpen: false\n    }\n  });\n  return new ApolloClient({\n    ssrMode: true,\n    link: createHttpLink({\n      uri: endPoint,\n      fetchOptions: {\n        credentials: 'include'\n      },\n      headers: headers\n    }),\n    cache: cache,\n    resolvers: {\n      Mutation: {\n        toggleCart: function toggleCart(_root, variables, _ref2) {\n          var cache = _ref2.cache;\n          cache.modify({\n            id: cache.identify({\n              __typename: 'Query'\n            }),\n            fields: {\n              cartOpen: function cartOpen(value) {\n                return !value;\n              }\n            }\n          });\n          return null;\n        }\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient, {\n  getDataFromTree: getDataFromTree\n});","map":{"version":3,"sources":["/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/lib/withData.js"],"names":["withApollo","ApolloClient","gql","createHttpLink","InMemoryCache","getDataFromTree","endPoint","paginationField","mergeDeep","createClient","headers","initialState","cache","typePolicies","Query","fields","getAllItems","User","cart","merge","existing","incoming","console","log","restore","writeQuery","query","data","cartOpen","ssrMode","link","uri","fetchOptions","credentials","resolvers","Mutation","toggleCart","_root","variables","modify","id","identify","__typename","value"],"mappings":";;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,cAA5B,EAA4CC,aAA5C,QAAiE,gBAAjE;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,SAAT,QAA0B,0BAA1B;;AAEA,SAASC,YAAT,OAAiD;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;AAE7C,MAAMC,KAAK,GAAG,IAAIR,aAAJ,CAAkB;AAC5BS,IAAAA,YAAY,EAAE;AACVC,MAAAA,KAAK,EAAE;AACHC,QAAAA,MAAM,EAAE;AACJC,UAAAA,WAAW,EAAET,eAAe;AADxB;AADL,OADG;AAMVU,MAAAA,IAAI,EAAE;AACFF,QAAAA,MAAM,EAAE;AACJG,UAAAA,IAAI,EAAE;AACFC,YAAAA,KADE,iBACIC,QADJ,EACcC,QADd,EACwB;AACtBC,cAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAEA,qBAAOC,QAAP;AACH;AALC;AADF;AADN;AANI;AADc,GAAlB,EAmBXG,OAnBW,CAmBHb,YAAY,IAAI,EAnBb,CAAd;AAoBAC,EAAAA,KAAK,CAACa,UAAN,CAAiB;AACbC,IAAAA,KAAK,EAAExB,GAAF,mBADQ;AAMbyB,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAE;AADR;AANO,GAAjB;AAWA,SAAO,IAAI3B,YAAJ,CAAiB;AACpB4B,IAAAA,OAAO,EAAE,IADW;AAEpBC,IAAAA,IAAI,EAAE3B,cAAc,CAAC;AACjB4B,MAAAA,GAAG,EAAEzB,QADY;AAEjB0B,MAAAA,YAAY,EAAE;AACVC,QAAAA,WAAW,EAAE;AADH,OAFG;AAKjBvB,MAAAA,OAAO,EAAPA;AALiB,KAAD,CAFA;AASpBE,IAAAA,KAAK,EAALA,KAToB;AAUpBsB,IAAAA,SAAS,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,UAAU,EAAE,oBAACC,KAAD,EAAQC,SAAR,SAAiC;AAAA,cAAZ1B,KAAY,SAAZA,KAAY;AACzCA,UAAAA,KAAK,CAAC2B,MAAN,CAAa;AACTC,YAAAA,EAAE,EAAE5B,KAAK,CAAC6B,QAAN,CAAe;AACfC,cAAAA,UAAU,EAAE;AADG,aAAf,CADK;AAIT3B,YAAAA,MAAM,EAAE;AACJa,cAAAA,QAAQ,EAAE,kBAAAe,KAAK;AAAA,uBAAI,CAACA,KAAL;AAAA;AADX;AAJC,WAAb;AAQA,iBAAO,IAAP;AACH;AAXK;AADH;AAVS,GAAjB,CAAP;AA0BH;;AAED,eAAe3C,UAAU,CAACS,YAAD,EAAe;AAAEJ,EAAAA,eAAe,EAAfA;AAAF,CAAf,CAAzB","sourcesContent":["import { withApollo } from 'next-with-apollo';\nimport { ApolloClient, gql, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { endPoint } from '../config';\nimport paginationField from './paginationField';\nimport { mergeDeep } from '@apollo/client/utilities';\n\nfunction createClient({ headers, initialState }) {\n\n    const cache = new InMemoryCache({\n        typePolicies: {\n            Query: {\n                fields: {\n                    getAllItems: paginationField(),\n                }\n            },\n            User: {\n                fields: {\n                    cart: {\n                        merge(existing, incoming) {\n                            console.log(existing);\n\n                            return incoming\n                        }\n                    }\n                }\n            },\n        }\n    }).restore(initialState || {});\n    cache.writeQuery({\n        query: gql`\n            query {\n                cartOpen \n            }\n        `,\n        data: {\n            cartOpen: false\n        }\n    })\n\n    return new ApolloClient({\n        ssrMode: true,\n        link: createHttpLink({\n            uri: endPoint,\n            fetchOptions: {\n                credentials: 'include'\n            },\n            headers\n        }),\n        cache,\n        resolvers: {\n            Mutation: {\n                toggleCart: (_root, variables, { cache }) => {\n                    cache.modify({\n                        id: cache.identify({\n                            __typename: 'Query',\n                        }),\n                        fields: {\n                            cartOpen: value => !value\n                        }\n                    });\n                    return null;\n                }\n            }\n        }\n    });\n}\n\nexport default withApollo(createClient, { getDataFromTree });"]},"metadata":{},"sourceType":"module"}