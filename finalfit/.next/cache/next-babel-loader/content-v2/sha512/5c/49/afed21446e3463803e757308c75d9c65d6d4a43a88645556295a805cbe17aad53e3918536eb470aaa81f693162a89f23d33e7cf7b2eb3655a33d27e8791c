{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\n\nconst useForm = (initial = {}) => {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n\n  const handleChange = async e => {\n    let {\n      name,\n      value,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseFloat(value);\n    }\n\n    if (type === 'file') {\n      const files = e.target.files;\n      const data = new FormData();\n      data.append('file', files[0]);\n      data.append('upload_preset', 'sickfits');\n      const res = await fetch('https://api.cloudinary.com/v1_1/kunlekodes/image/upload', {\n        method: 'POST',\n        body: data\n      });\n      const file = await res.json();\n      value = file.secure_url;\n      inputs.largeImage = file.eager[0].secure_url;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  };\n\n  const resetForm = () => {\n    setInputs(initial);\n  };\n\n  const clearForm = () => {\n    for (var item in inputs) {\n      inputs[item] = \"\";\n    }\n  };\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","name","value","type","target","parseFloat","files","data","FormData","append","res","fetch","method","body","file","json","secure_url","largeImage","eager","resetForm","clearForm","item"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,OAAO,GAAG,CAACC,OAAO,GAAG,EAAX,KAAkB;AAC9B,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;;AAEA,QAAMG,YAAY,GAAG,MAAMC,CAAN,IAAW;AAC5B,QAAI;AAACC,MAAAA,IAAD;AAAOC,MAAAA,KAAP;AAAcC,MAAAA;AAAd,QAAsBH,CAAC,CAACI,MAA5B;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACnBD,MAAAA,KAAK,GAAGG,UAAU,CAACH,KAAD,CAAlB;AACH;;AACD,QAAGC,IAAI,KAAK,MAAZ,EAAoB;AAChB,YAAMG,KAAK,GAAGN,CAAC,CAACI,MAAF,CAASE,KAAvB;AACA,YAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBH,KAAK,CAAC,CAAD,CAAzB;AACAC,MAAAA,IAAI,CAACE,MAAL,CAAY,eAAZ,EAA6B,UAA7B;AAEA,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,yDAAD,EAA4D;AAACC,QAAAA,MAAM,EAAE,MAAT;AAAiBC,QAAAA,IAAI,EAAEN;AAAvB,OAA5D,CAAvB;AACA,YAAMO,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACAb,MAAAA,KAAK,GAAGY,IAAI,CAACE,UAAb;AACAnB,MAAAA,MAAM,CAACoB,UAAP,GAAoBH,IAAI,CAACI,KAAL,CAAW,CAAX,EAAcF,UAAlC;AACH;;AAEDlB,IAAAA,SAAS,iCACFD,MADE;AAEL,OAACI,IAAD,GAASC;AAFJ,OAAT;AAIH,GArBD;;AAuBA,QAAMiB,SAAS,GAAG,MAAM;AACpBrB,IAAAA,SAAS,CAACF,OAAD,CAAT;AACH,GAFD;;AAIA,QAAMwB,SAAS,GAAG,MAAM;AACpB,SAAI,IAAIC,IAAR,IAAgBxB,MAAhB,EAAwB;AACpBA,MAAAA,MAAM,CAACwB,IAAD,CAAN,GAAe,EAAf;AACH;AACJ,GAJD;;AAMA,SAAO;AAACxB,IAAAA,MAAD;AAASE,IAAAA,YAAT;AAAuBoB,IAAAA,SAAvB;AAAkCC,IAAAA;AAAlC,GAAP;AACH,CArCD;;AAuCA,eAAezB,OAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useForm = (initial = {}) => {\n    const [inputs, setInputs] = useState(initial);\n\n    const handleChange = async e => {\n        let {name, value, type} = e.target;\n        if (type === 'number') {\n            value = parseFloat(value);\n        }\n        if(type === 'file') {\n            const files = e.target.files;\n            const data = new FormData();\n            data.append('file', files[0]);\n            data.append('upload_preset', 'sickfits'); \n\n            const res = await fetch('https://api.cloudinary.com/v1_1/kunlekodes/image/upload', {method: 'POST', body: data});\n            const file = await res.json();\n            value = file.secure_url;\n            inputs.largeImage = file.eager[0].secure_url;\n        }\n\n        setInputs({\n            ...inputs,\n            [name] : value\n        });\n    };\n\n    const resetForm = () => {\n        setInputs(initial);\n    }\n\n    const clearForm = () => {\n        for(var item in inputs) {\n            inputs[item] = \"\";\n        }\n    }\n\n    return {inputs, handleChange, resetForm, clearForm};\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}