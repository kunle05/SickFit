{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      const {\n        skip,\n        take,\n        orderBy\n      } = args;\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : data.itemsCount;\n      const page = skip / take + 1;\n      const pages = Math.ceil(count / take);\n      const items = existing.slice(skip, skip + take).filter(x => x);\n\n      if (items.length && items.length !== take && page === pages) {\n        return items;\n      }\n\n      if (items.length !== take) {\n        return false;\n      }\n\n      if (items.length) {\n        return items;\n      }\n\n      return false;\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        skip,\n        take\n      } = args;\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      return merged;\n    }\n\n  };\n}\n;","map":{"version":3,"sources":["/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","take","orderBy","data","readQuery","query","count","itemsCount","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAE,KADN;;AAEHC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AACjC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,IAAR;AAAcC,QAAAA;AAAd,UAA0BJ,IAAhC;AAEA,YAAMK,IAAI,GAAGJ,KAAK,CAACK,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEZ;AAAT,OAAhB,CAAb;AACA,YAAMa,KAAK,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEI,UAApB;AACA,YAAMC,IAAI,GAAGR,IAAI,GAAGC,IAAP,GAAc,CAA3B;AACA,YAAMQ,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGL,IAAlB,CAAd;AAEA,YAAMW,KAAK,GAAGf,QAAQ,CAACgB,KAAT,CAAeb,IAAf,EAAqBA,IAAI,GAAGC,IAA5B,EAAkCa,MAAlC,CAAyCC,CAAC,IAAIA,CAA9C,CAAd;;AACA,UAAGH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBf,IAAjC,IAAyCO,IAAI,KAAKC,KAArD,EAA4D;AACxD,eAAOG,KAAP;AACH;;AACD,UAAGA,KAAK,CAACI,MAAN,KAAiBf,IAApB,EAA0B;AACtB,eAAO,KAAP;AACH;;AACD,UAAGW,KAAK,CAACI,MAAT,EAAiB;AACb,eAAOJ,KAAP;AACH;;AACD,aAAO,KAAP;AACH,KArBE;;AAsBHK,IAAAA,KAAK,CAACpB,QAAD,EAAWqB,QAAX,EAAqB;AAAEpB,MAAAA;AAAF,KAArB,EAA+B;AAChC,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAiBH,IAAvB;AACA,YAAMqB,MAAM,GAAGtB,QAAQ,GAAGA,QAAQ,CAACgB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAI,IAAIO,CAAC,GAAGpB,IAAZ,EAAkBoB,CAAC,GAAGpB,IAAI,GAAGkB,QAAQ,CAACF,MAAtC,EAA8C,EAAEI,CAAhD,EAAmD;AAC/CD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGpB,IAAL,CAApB;AACH;;AACD,aAAOmB,MAAP;AACH;;AA7BE,GAAP;AA+BH;AAAA","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n    return {\n        keyArgs: false,\n        read(existing = [], { args, cache }) {\n            const { skip, take, orderBy } = args;\n\n            const data = cache.readQuery({ query: PAGINATION_QUERY });\n            const count = data?.itemsCount;\n            const page = skip / take + 1;\n            const pages = Math.ceil(count / take);\n\n            const items = existing.slice(skip, skip + take).filter(x => x);\n            if(items.length && items.length !== take && page === pages) {\n                return items;\n            }\n            if(items.length !== take) {\n                return false;\n            }\n            if(items.length) {\n                return items\n            }\n            return false;\n        },\n        merge(existing, incoming, { args }) {\n            const { skip, take } = args;\n            const merged = existing ? existing.slice(0) : [];\n            for(let i = skip; i < skip + incoming.length; ++i) {\n                merged[i] = incoming[i - skip];\n            }\n            return merged;\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}