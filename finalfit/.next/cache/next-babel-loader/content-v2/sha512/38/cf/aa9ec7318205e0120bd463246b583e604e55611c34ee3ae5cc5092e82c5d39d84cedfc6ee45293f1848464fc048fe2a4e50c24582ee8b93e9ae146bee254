{"ast":null,"code":"import { withApollo } from 'next-with-apollo';\nimport { ApolloClient, gql, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { endPoint } from '../config';\nimport paginationField from './paginationField';\nimport { mergeDeep } from '@apollo/client/utilities';\n\nfunction createClient({\n  headers,\n  initialState\n}) {\n  const cache = new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          getAllItems: paginationField()\n        }\n      },\n      User: {\n        fields: {\n          cart: {\n            merge(existing, incoming) {\n              console.log(existing);\n              return incoming;\n            }\n\n          }\n        }\n      }\n    }\n  }).restore(initialState || {});\n  cache.writeQuery({\n    query: gql`\n            query {\n                cartOpen \n            }\n        `,\n    data: {\n      cartOpen: false\n    }\n  });\n  return new ApolloClient({\n    ssrMode: true,\n    link: createHttpLink({\n      uri: endPoint,\n      fetchOptions: {\n        credentials: 'include'\n      },\n      headers\n    }),\n    cache,\n    resolvers: {\n      Mutation: {\n        toggleCart: (_root, variables, {\n          cache\n        }) => {\n          cache.modify({\n            id: cache.identify({\n              __typename: 'Query'\n            }),\n            fields: {\n              cartOpen: value => !value\n            }\n          });\n          return null;\n        }\n      }\n    }\n  });\n}\n\nexport default withApollo(createClient, {\n  getDataFromTree\n});","map":{"version":3,"sources":["/Users/olakunleyusuf/Desktop/Kunle Kodes/Node Server/Advanced-React/finalfit/lib/withData.js"],"names":["withApollo","ApolloClient","gql","createHttpLink","InMemoryCache","getDataFromTree","endPoint","paginationField","mergeDeep","createClient","headers","initialState","cache","typePolicies","Query","fields","getAllItems","User","cart","merge","existing","incoming","console","log","restore","writeQuery","query","data","cartOpen","ssrMode","link","uri","fetchOptions","credentials","resolvers","Mutation","toggleCart","_root","variables","modify","id","identify","__typename","value"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,cAA5B,EAA4CC,aAA5C,QAAiE,gBAAjE;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,SAAT,QAA0B,0BAA1B;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAtB,EAAiD;AAE7C,QAAMC,KAAK,GAAG,IAAIR,aAAJ,CAAkB;AAC5BS,IAAAA,YAAY,EAAE;AACVC,MAAAA,KAAK,EAAE;AACHC,QAAAA,MAAM,EAAE;AACJC,UAAAA,WAAW,EAAET,eAAe;AADxB;AADL,OADG;AAMVU,MAAAA,IAAI,EAAE;AACFF,QAAAA,MAAM,EAAE;AACJG,UAAAA,IAAI,EAAE;AACFC,YAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACtBC,cAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAEA,qBAAOC,QAAP;AACH;;AALC;AADF;AADN;AANI;AADc,GAAlB,EAmBXG,OAnBW,CAmBHb,YAAY,IAAI,EAnBb,CAAd;AAoBAC,EAAAA,KAAK,CAACa,UAAN,CAAiB;AACbC,IAAAA,KAAK,EAAExB,GAAI;AACnB;AACA;AACA;AACA,SALqB;AAMbyB,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAE;AADR;AANO,GAAjB;AAWA,SAAO,IAAI3B,YAAJ,CAAiB;AACpB4B,IAAAA,OAAO,EAAE,IADW;AAEpBC,IAAAA,IAAI,EAAE3B,cAAc,CAAC;AACjB4B,MAAAA,GAAG,EAAEzB,QADY;AAEjB0B,MAAAA,YAAY,EAAE;AACVC,QAAAA,WAAW,EAAE;AADH,OAFG;AAKjBvB,MAAAA;AALiB,KAAD,CAFA;AASpBE,IAAAA,KAToB;AAUpBsB,IAAAA,SAAS,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,SAAR,EAAmB;AAAE1B,UAAAA;AAAF,SAAnB,KAAiC;AACzCA,UAAAA,KAAK,CAAC2B,MAAN,CAAa;AACTC,YAAAA,EAAE,EAAE5B,KAAK,CAAC6B,QAAN,CAAe;AACfC,cAAAA,UAAU,EAAE;AADG,aAAf,CADK;AAIT3B,YAAAA,MAAM,EAAE;AACJa,cAAAA,QAAQ,EAAEe,KAAK,IAAI,CAACA;AADhB;AAJC,WAAb;AAQA,iBAAO,IAAP;AACH;AAXK;AADH;AAVS,GAAjB,CAAP;AA0BH;;AAED,eAAe3C,UAAU,CAACS,YAAD,EAAe;AAAEJ,EAAAA;AAAF,CAAf,CAAzB","sourcesContent":["import { withApollo } from 'next-with-apollo';\nimport { ApolloClient, gql, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { endPoint } from '../config';\nimport paginationField from './paginationField';\nimport { mergeDeep } from '@apollo/client/utilities';\n\nfunction createClient({ headers, initialState }) {\n\n    const cache = new InMemoryCache({\n        typePolicies: {\n            Query: {\n                fields: {\n                    getAllItems: paginationField(),\n                }\n            },\n            User: {\n                fields: {\n                    cart: {\n                        merge(existing, incoming) {\n                            console.log(existing);\n\n                            return incoming\n                        }\n                    }\n                }\n            },\n        }\n    }).restore(initialState || {});\n    cache.writeQuery({\n        query: gql`\n            query {\n                cartOpen \n            }\n        `,\n        data: {\n            cartOpen: false\n        }\n    })\n\n    return new ApolloClient({\n        ssrMode: true,\n        link: createHttpLink({\n            uri: endPoint,\n            fetchOptions: {\n                credentials: 'include'\n            },\n            headers\n        }),\n        cache,\n        resolvers: {\n            Mutation: {\n                toggleCart: (_root, variables, { cache }) => {\n                    cache.modify({\n                        id: cache.identify({\n                            __typename: 'Query',\n                        }),\n                        fields: {\n                            cartOpen: value => !value\n                        }\n                    });\n                    return null;\n                }\n            }\n        }\n    });\n}\n\nexport default withApollo(createClient, { getDataFromTree });"]},"metadata":{},"sourceType":"module"}